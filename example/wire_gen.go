// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package example

import (
	"github.com/google/wire"
	"io"
	"os"
)

// Injectors from injector.go:

/*
Create injector functions for each of the dependencies
and return a pointer to the struct
*/
func InizializeSimpleService() *SimpleService {
	simpleRepository := NewSimpleRepository()
	simpleService := NewSimpleService(simpleRepository)
	return simpleService
}

/*
Create injector functions for each of the dependencies
with parameters isError is boolean and return a pointer to the struct and error
*/
func InizializeSimpleServiceWithError(isError bool) (*SimpleServiceWithError, error) {
	simpleRepositoryWithError := NewSimpleRepositoryWithError(isError)
	simpleServiceWithError, err := NewSimpleServiceWithError(simpleRepositoryWithError)
	if err != nil {
		return nil, err
	}
	return simpleServiceWithError, nil
}

/*
Create injector InitializeDatabaseRepository function
with wire build NewDatabaseRepository, NewDatabasePostgresSQL, NewDatabaseMySQL and return a nil pointer
*/
func InitializeDatabaseRepository() *DatabaseRepository {
	databasePostgresSQL := NewDatabasePostgresSQL()
	databaseMySQL := NewDatabaseMySQL()
	databaseRepository := NewDatabaseRepository(databasePostgresSQL, databaseMySQL)
	return databaseRepository
}

// Create injector InitializeFooBarService function with wire build FooSet BarSet and NewFooBarService and return a nil pointer
func InitializeFooBarService() *FooBarService {
	fooRepository := NewFooRepository()
	fooService := NewFooService(fooRepository)
	barRepository := NewBarRepository()
	barService := NewBarService(barRepository)
	fooBarService := NewFooBarService(fooService, barService)
	return fooBarService
}

// Create injector InizializedHelloService function with return HelloService and wire build helloSet and NewHelloService
func InizializedHelloService() *HelloService {
	sayHelloImpl := NewSayHelloImpl()
	helloService := NewHelloService(sayHelloImpl)
	return helloService
}

// Create injector InizializedFooBar function with return FooBar and wire build FooSet BarSet and NewFooBar function with structs Foo and Bar
func InizializedFooBar() *FooBar {
	foo := NewFoo()
	bar := NewBar()
	fooBar := &FooBar{
		Foo: foo,
		Bar: bar,
	}
	return fooBar
}

//Create injector InizializedFooBarUsingBindValue function with return FooBar and wire build with value fooValue and barValue and NewFooBar function with structs Foo and Bar
func InizializedFooBarUsingBindValue() *FooBar {
	foo := _wireFooValue
	bar := _wireBarValue
	fooBar := &FooBar{
		Foo: foo,
		Bar: bar,
	}
	return fooBar
}

var (
	_wireFooValue = fooValue
	_wireBarValue = barValue
)

func InitializedReader() io.Reader {
	reader := _wireFileValue
	return reader
}

var (
	_wireFileValue = os.Stdin
)

// Create injector InizializedCustomer function with return Person and wire build with struct field of Customer and Person
func InizializedCustomer() *Person {
	customer := NewCustomer()
	person := customer.Person
	return person
}

// Create injector InizializedCleanup function with return Cleanup and wire build with Cleanup function
func InizializedCleanup(name string) (*FileSystem, func()) {
	file, cleanup := NewFile(name)
	fileSystem, cleanup2 := NewFileSystem(file)
	return fileSystem, func() {
		cleanup2()
		cleanup()
	}
}

// injector.go:

// Create provider set with name foo set with parameters foo repository and foo service
var FooSet = wire.NewSet(NewFooRepository, NewFooService)

// Create provider set with name bar set with parameters bar repository and bar service
var BarSet = wire.NewSet(NewBarRepository, NewBarService)

/*
Implementation Create Provider Set for bind interface
Create provider set helloSet
*/
var helloSet = wire.NewSet(
	NewSayHelloImpl, wire.Bind(new(SayHello), new(*SayHelloImpl)),
)

var fooValue = &Foo{} // Value

var barValue = &Bar{} // Value
